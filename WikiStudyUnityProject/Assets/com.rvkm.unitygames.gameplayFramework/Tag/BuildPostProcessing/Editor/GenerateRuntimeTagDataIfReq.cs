using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEditor.Callbacks;
using UnityEngine;

namespace com.rvkm.unitygames.gameplayFramework
{
    public class GenerateRuntimeTagDataIfReq : IPreprocessBuildWithReport
    {
        int IOrderedCallback.callbackOrder { get { return 1; } }
        void IPreprocessBuildWithReport.OnPreprocessBuild(BuildReport report)
        {
            CreateRuntimeDataIfReq();
        }

        void CreateRuntimeDataIfReq()
        {
            TagData runTimedata = AssetDatabase.LoadAssetAtPath<TagData>(ConstantManager.runtimeTagAsset_RelativePath);
            if (runTimedata == null)
            {
                runTimedata = ScriptableObject.CreateInstance<TagData>();
                runTimedata.saveTime = DateTime.Now;
                runTimedata.rootNodeRuntime = new TagNode();
                runTimedata.rootNodeRuntime.tag = GameTag.rootTag;
                runTimedata.rootNodeRuntime.parentTag = null;
                runTimedata.rootNodeRuntime.childTags = null;
                AssetDatabase.CreateAsset(runTimedata, ConstantManager.runtimeTagAsset_RelativePath);
                Debug.Log("runtime tag asset created! at: " + ConstantManager.runtimeTagAsset_RelativePath);
                CompileDefaultEnums();
                AssetDatabase.SaveAssets();
            }

            if (runTimedata.rootNodeRuntime == null)
            {
                runTimedata.rootNodeRuntime = new TagNode();
                runTimedata.rootNodeRuntime.tag = GameTag.rootTag;
                runTimedata.rootNodeRuntime.parentTag = null;
                runTimedata.rootNodeRuntime.childTags = null;
            }
            runTimedata.rootNodeRuntime.tag = GameTag.rootTag;
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }

        void CompileDefaultEnums()
        {
            string dPath = Application.dataPath;
            dPath = dPath.Replace("Assets", "");
            var enumDefFPath = Path.Combine(dPath, EditorConstantManager.tagEnumDefinesScriptFPath);
            AllTagEnumDescription defaultEnums = new AllTagEnumDescription();

            string startStr =
                "//This file is generated by editor code!" + Environment.NewLine +
                "//User have not created any game tag, these are built in GameTags." + Environment.NewLine +
                "using System.Collections;" + Environment.NewLine +
                "using System.Collections.Generic;" + Environment.NewLine + Environment.NewLine +
                "using UnityEngine;" + Environment.NewLine + Environment.NewLine +
                "namespace com.rvkm.unitygames.gameplayFramework" + Environment.NewLine +
                "{" + Environment.NewLine +
                "    public enum GameTag" + Environment.NewLine +
                "    {" + Environment.NewLine + "          ";
            string endingStr =
                "    }" + Environment.NewLine +
                "}" + Environment.NewLine;

            string enumDefSoup = startStr;
            for (int i = 0; i < defaultEnums.AllTagDesc.Count; i++)
            {
                var a = defaultEnums.AllTagDesc[i];
                if (i == defaultEnums.AllTagDesc.Count - 1)
                {
                    enumDefSoup = enumDefSoup + (a.EnumName + " = " + a.EnumValue + Environment.NewLine);
                }
                else
                {
                    enumDefSoup = enumDefSoup + (a.EnumName + " = " + a.EnumValue + ", ");
                }
            }
            enumDefSoup += endingStr;

            AssetDatabase.DeleteAsset(enumDefFPath);
            var fStream = File.Create(enumDefFPath);
            fStream.Dispose();
            File.WriteAllText(enumDefFPath, enumDefSoup);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            Debug.Log("There was no runtime tag found. So we have created a default data at :" + enumDefFPath);
        }
    }
}